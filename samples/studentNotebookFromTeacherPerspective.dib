#!csharp

Import("teacher.dib")

#!markdown

## Question 1: DFS

#!markdown

What is DFS? Depth-first search (DFS) is an algorithm for traversing or searching tree or graph data structures. The algorithm starts at the root node (selecting some arbitrary node as the root node in the case of a graph) and explores as far as possible along each branch before backtracking.

#!markdown

This is an example implementation of DFS using recursion. 

#!csharp

void DFSHelper(int src, bool[] visited)
        {
            visited[src] = true;
            Console.Write(src + "->");
            if (linkedListArray[src] != null)
            {
                foreach (var item in linkedListArray[src])
                {
                    if (!visited[item] == true)
                    {
                        DFSHelper(item, visited);
                    }
                }
            }
        }

internal void DFSRecursive()
{
    Console.WriteLine("DFS");
    bool[] visited = new bool[linkedListArray.Length + 1];
    DFSHelper(1, visited);

}

#!markdown

Now, you will implement DFS using iteration.

#!csharp

[SOME KIND OF LABEL INDICATING THIS IS A QUESTION CELL]

// type your answer here
// remove the throw new and starting type ur answer
void DFSIterative() 
{
    throw new NotImplementedException();
}

#!markdown

Algorithms that use depth-first search as a building block include:

Finding connected components.

Topological sorting.

Finding 2-(edge or vertex)-connected components.

Finding 3-(edge or vertex)-connected components.

Finding the bridges of a graph.
